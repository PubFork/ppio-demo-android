apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "io.pp.net_disk_demo"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 4
        versionName "0.1.3"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            // Set up a supported SO library architecture
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))

            if (variant.buildType.name.equals('debug')) {
                outputFileName = "ppio-demo-${versionName}_${date}.apk"
            }

            if (variant.buildType.name.equals('release')) {
                outputFileName = "ppio-demo-${versionName}.apk"
            }
        }
    }

    signingConfigs {
        release
    }

    Properties signingProps = new Properties()
    def signingPropFile = new File('signing.properties')
    if (signingPropFile.canRead()) {
        signingProps.load(new FileInputStream(signingPropFile))

        if (signingProps != null && signingProps.containsKey('STORE_FILE') && signingProps.containsKey('STORE_PASSWORD') &&
                signingProps.containsKey('KEY_ALIAS') && signingProps.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.debug.storeFile = file(signingProps['STORE_FILE'])
            android.signingConfigs.debug.storePassword = signingProps['STORE_PASSWORD']
            android.signingConfigs.debug.keyAlias = signingProps['KEY_ALIAS']
            android.signingConfigs.debug.keyPassword = signingProps['KEY_PASSWORD']

            android.signingConfigs.release.storeFile = file(signingProps['STORE_FILE'])
            android.signingConfigs.release.storePassword = signingProps['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = signingProps['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = signingProps['KEY_PASSWORD']
        } else {
            println 'signing.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }
    } else {
        println 'signing.properties not found'
        android.buildTypes.release.signingConfig = null
    }

    def bugly_appid = "9527"
    def bugly_app_channel = "9527"
    def bugly_enable_debug = true
    def bugly_app_debug_version = "9527"
    def bugly_app_release_version = "9527"

    Properties buglyProps = new Properties()
    def buglyPropFile = new File('bugly.properties')
    if (buglyPropFile.canRead()) {
        buglyProps.load(new FileInputStream(buglyPropFile))

        if (buglyProps != null && buglyProps.containsKey('BUGLY_APPID') &&
                buglyProps.containsKey('BUGLY_APP_DEBUG_VERSION') &&
                buglyProps.containsKey('BUGLY_APP_RELEASE_VERSION') &&
                buglyProps.containsKey('BUGLY_APP_CHANNEL') &&
                buglyProps.containsKey('BUGLY_ENABLE_DEBUG')) {
            println 'bugly.properties found and entries found'
            bugly_appid = buglyProps['BUGLY_APPID']
            bugly_app_channel = buglyProps['BUGLY_APP_CHANNEL']
            bugly_enable_debug = buglyProps['BUGLY_ENABLE_DEBUG']

            bugly_app_debug_version = buglyProps['BUGLY_APP_DEBUG_VERSION']
            bugly_app_release_version = buglyProps['BUGLY_APP_RELEASE_VERSION']
        } else {
            println 'bugly.properties found but some entries are missing'
        }
    } else {
        println 'bugly.properties not found'
    }

    buildTypes {
        release {
            multiDexKeepProguard file("multidex-config.pro")

            signingConfig signingConfigs.release

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [BUGLY_APPID       : bugly_appid,
                                    BUGLY_APP_VERSION : bugly_app_release_version,
                                    BUGLY_APP_CHANNEL : bugly_app_channel,
                                    BUGLY_ENABLE_DEBUG: bugly_enable_debug]
        }

        debug {
            multiDexKeepProguard file("multidex-config.pro")

            signingConfig signingConfigs.debug

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [BUGLY_APPID       : bugly_appid,
                                    BUGLY_APP_VERSION : bugly_app_debug_version,
                                    BUGLY_APP_CHANNEL : bugly_app_channel,
                                    BUGLY_ENABLE_DEBUG: bugly_enable_debug]
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'

    implementation 'org.web3j:core:3.3.1-android'

    //Used to generate mnemonic words
    implementation('io.github.novacrypto:BIP39:0.1.9', {
        exclude group: "com.madgag.spongycastle:core:1.58.0.0"
    })

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.google.code.gson:gson:2.8.4'

    //To use com.google.common.io.BaseEncoding, need
    implementation 'com.google.guava:guava:27.0.1-jre'
    // or, for Android:
    //api 'com.google.guava:guava:27.0.1-android'

    //Use Rpc
    implementation files('libs/android-json-rpc-0.3.4.jar')

    implementation files('libs/poss.aar')

    implementation 'com.lambdaworks:scrypt:1.4.0'

    implementation 'cn.bingoogolapple:bga-qrcode-zxing:1.3.6'

    //bugly
    implementation 'com.tencent.bugly:crashreport:latest.release'
    implementation 'com.tencent.tinker:tinker-android-lib:latest.release'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'

    //firebase
    implementation 'com.google.firebase:firebase-core:16.0.6'

    implementation 'com.github.Dovar66:DToast:1.1.2'

    //
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okio:okio:1.8.0'
}

apply plugin: 'com.google.gms.google-services'